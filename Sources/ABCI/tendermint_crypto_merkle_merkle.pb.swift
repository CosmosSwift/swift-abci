// ===----------------------------------------------------------------------===
//
//  This source file is part of the CosmosSwift open source project.
//
//  tendermint_crypto_merkle_merkle.pb.swift last updated 16/07/2020
//
//  Copyright Â© 2020 Katalysis B.V. and the CosmosSwift project authors.
//  Licensed under Apache License v2.0
//
//  See LICENSE.txt for license information
//  See CONTRIBUTORS.txt for the list of CosmosSwift project authors
//
//  SPDX-License-Identifier: Apache-2.0
//
// ===----------------------------------------------------------------------===

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Tendermint_Crypto_Merkle_Proof {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var total: Int64 = 0

    var index: Int64 = 0

    var leafHash: Data = SwiftProtobuf.Internal.emptyData

    var aunts: [Data] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "tendermint.crypto.merkle"

extension Tendermint_Crypto_Merkle_Proof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Proof"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "total"),
        2: .same(proto: "index"),
        3: .standard(proto: "leaf_hash"),
        4: .same(proto: "aunts"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &total)
            case 2: try decoder.decodeSingularInt64Field(value: &index)
            case 3: try decoder.decodeSingularBytesField(value: &leafHash)
            case 4: try decoder.decodeRepeatedBytesField(value: &aunts)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if total != 0 {
            try visitor.visitSingularInt64Field(value: total, fieldNumber: 1)
        }
        if index != 0 {
            try visitor.visitSingularInt64Field(value: index, fieldNumber: 2)
        }
        if !leafHash.isEmpty {
            try visitor.visitSingularBytesField(value: leafHash, fieldNumber: 3)
        }
        if !aunts.isEmpty {
            try visitor.visitRepeatedBytesField(value: aunts, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Crypto_Merkle_Proof, rhs: Tendermint_Crypto_Merkle_Proof) -> Bool {
        if lhs.total != rhs.total { return false }
        if lhs.index != rhs.index { return false }
        if lhs.leafHash != rhs.leafHash { return false }
        if lhs.aunts != rhs.aunts { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
