// ===----------------------------------------------------------------------===
//
//  This source file is part of the CosmosSwift open source project.
//
//  tendermint_abci_types_types.pb.swift last updated 16/07/2020
//
//  Copyright Â© 2020 Katalysis B.V. and the CosmosSwift project authors.
//  Licensed under Apache License v2.0
//
//  See LICENSE.txt for license information
//  See CONTRIBUTORS.txt for the list of CosmosSwift project authors
//
//  SPDX-License-Identifier: Apache-2.0
//
// ===----------------------------------------------------------------------===

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Tendermint_Abci_Types_CheckTxType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case new // = 0
    case recheck // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .new
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .new
        case 1: self = .recheck
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .new: return 0
        case .recheck: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

    extension Tendermint_Abci_Types_CheckTxType: CaseIterable {
        // The compiler won't synthesize support with the UNRECOGNIZED case.
        static var allCases: [Tendermint_Abci_Types_CheckTxType] = [
            .new,
            .recheck,
        ]
    }

#endif // swift(>=4.2)

struct Tendermint_Abci_Types_Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: Tendermint_Abci_Types_Request.OneOf_Value?

    var echo: Tendermint_Abci_Types_RequestEcho {
        get {
            if case let .echo(v)? = value { return v }
            return Tendermint_Abci_Types_RequestEcho()
        }
        set { value = .echo(newValue) }
    }

    var flush: Tendermint_Abci_Types_RequestFlush {
        get {
            if case let .flush(v)? = value { return v }
            return Tendermint_Abci_Types_RequestFlush()
        }
        set { value = .flush(newValue) }
    }

    var info: Tendermint_Abci_Types_RequestInfo {
        get {
            if case let .info(v)? = value { return v }
            return Tendermint_Abci_Types_RequestInfo()
        }
        set { value = .info(newValue) }
    }

    var setOption: Tendermint_Abci_Types_RequestSetOption {
        get {
            if case let .setOption(v)? = value { return v }
            return Tendermint_Abci_Types_RequestSetOption()
        }
        set { value = .setOption(newValue) }
    }

    var initChain: Tendermint_Abci_Types_RequestInitChain {
        get {
            if case let .initChain(v)? = value { return v }
            return Tendermint_Abci_Types_RequestInitChain()
        }
        set { value = .initChain(newValue) }
    }

    var query: Tendermint_Abci_Types_RequestQuery {
        get {
            if case let .query(v)? = value { return v }
            return Tendermint_Abci_Types_RequestQuery()
        }
        set { value = .query(newValue) }
    }

    var beginBlock: Tendermint_Abci_Types_RequestBeginBlock {
        get {
            if case let .beginBlock(v)? = value { return v }
            return Tendermint_Abci_Types_RequestBeginBlock()
        }
        set { value = .beginBlock(newValue) }
    }

    var checkTx: Tendermint_Abci_Types_RequestCheckTx {
        get {
            if case let .checkTx(v)? = value { return v }
            return Tendermint_Abci_Types_RequestCheckTx()
        }
        set { value = .checkTx(newValue) }
    }

    var deliverTx: Tendermint_Abci_Types_RequestDeliverTx {
        get {
            if case let .deliverTx(v)? = value { return v }
            return Tendermint_Abci_Types_RequestDeliverTx()
        }
        set { value = .deliverTx(newValue) }
    }

    var endBlock: Tendermint_Abci_Types_RequestEndBlock {
        get {
            if case let .endBlock(v)? = value { return v }
            return Tendermint_Abci_Types_RequestEndBlock()
        }
        set { value = .endBlock(newValue) }
    }

    var commit: Tendermint_Abci_Types_RequestCommit {
        get {
            if case let .commit(v)? = value { return v }
            return Tendermint_Abci_Types_RequestCommit()
        }
        set { value = .commit(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
        case echo(Tendermint_Abci_Types_RequestEcho)
        case flush(Tendermint_Abci_Types_RequestFlush)
        case info(Tendermint_Abci_Types_RequestInfo)
        case setOption(Tendermint_Abci_Types_RequestSetOption)
        case initChain(Tendermint_Abci_Types_RequestInitChain)
        case query(Tendermint_Abci_Types_RequestQuery)
        case beginBlock(Tendermint_Abci_Types_RequestBeginBlock)
        case checkTx(Tendermint_Abci_Types_RequestCheckTx)
        case deliverTx(Tendermint_Abci_Types_RequestDeliverTx)
        case endBlock(Tendermint_Abci_Types_RequestEndBlock)
        case commit(Tendermint_Abci_Types_RequestCommit)

        #if !swift(>=4.1)
            static func == (lhs: Tendermint_Abci_Types_Request.OneOf_Value, rhs: Tendermint_Abci_Types_Request.OneOf_Value) -> Bool {
                switch (lhs, rhs) {
                case let (.echo(l), .echo(r)): return l == r
                case let (.flush(l), .flush(r)): return l == r
                case let (.info(l), .info(r)): return l == r
                case let (.setOption(l), .setOption(r)): return l == r
                case let (.initChain(l), .initChain(r)): return l == r
                case let (.query(l), .query(r)): return l == r
                case let (.beginBlock(l), .beginBlock(r)): return l == r
                case let (.checkTx(l), .checkTx(r)): return l == r
                case let (.deliverTx(l), .deliverTx(r)): return l == r
                case let (.endBlock(l), .endBlock(r)): return l == r
                case let (.commit(l), .commit(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}
}

struct Tendermint_Abci_Types_RequestEcho {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var message: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestFlush {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var version: String = String()

    var blockVersion: UInt64 = 0

    var p2PVersion: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// nondeterministic
struct Tendermint_Abci_Types_RequestSetOption {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var key: String = String()

    var value: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestInitChain {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var time: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _time = newValue }
    }

    /// Returns true if `time` has been explicitly set.
    var hasTime: Bool { return self._time != nil }
    /// Clears the value of `time`. Subsequent reads from it will return its default value.
    mutating func clearTime() { _time = nil }

    var chainID: String = String()

    var consensusParams: Tendermint_Abci_Types_ConsensusParams {
        get { return _consensusParams ?? Tendermint_Abci_Types_ConsensusParams() }
        set { _consensusParams = newValue }
    }

    /// Returns true if `consensusParams` has been explicitly set.
    var hasConsensusParams: Bool { return self._consensusParams != nil }
    /// Clears the value of `consensusParams`. Subsequent reads from it will return its default value.
    mutating func clearConsensusParams() { _consensusParams = nil }

    var validators: [Tendermint_Abci_Types_ValidatorUpdate] = []

    var appStateBytes: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _consensusParams: Tendermint_Abci_Types_ConsensusParams?
}

struct Tendermint_Abci_Types_RequestQuery {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: Data = SwiftProtobuf.Internal.emptyData

    var path: String = String()

    var height: Int64 = 0

    var prove: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestBeginBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hash: Data = SwiftProtobuf.Internal.emptyData

    var header: Tendermint_Abci_Types_Header {
        get { return _header ?? Tendermint_Abci_Types_Header() }
        set { _header = newValue }
    }

    /// Returns true if `header` has been explicitly set.
    var hasHeader: Bool { return self._header != nil }
    /// Clears the value of `header`. Subsequent reads from it will return its default value.
    mutating func clearHeader() { _header = nil }

    var lastCommitInfo: Tendermint_Abci_Types_LastCommitInfo {
        get { return _lastCommitInfo ?? Tendermint_Abci_Types_LastCommitInfo() }
        set { _lastCommitInfo = newValue }
    }

    /// Returns true if `lastCommitInfo` has been explicitly set.
    var hasLastCommitInfo: Bool { return self._lastCommitInfo != nil }
    /// Clears the value of `lastCommitInfo`. Subsequent reads from it will return its default value.
    mutating func clearLastCommitInfo() { _lastCommitInfo = nil }

    var byzantineValidators: [Tendermint_Abci_Types_Evidence] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _header: Tendermint_Abci_Types_Header?
    fileprivate var _lastCommitInfo: Tendermint_Abci_Types_LastCommitInfo?
}

struct Tendermint_Abci_Types_RequestCheckTx {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tx: Data = SwiftProtobuf.Internal.emptyData

    var type: Tendermint_Abci_Types_CheckTxType = .new

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestDeliverTx {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var tx: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestEndBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var height: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_RequestCommit {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var value: Tendermint_Abci_Types_Response.OneOf_Value?

    var exception: Tendermint_Abci_Types_ResponseException {
        get {
            if case let .exception(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseException()
        }
        set { value = .exception(newValue) }
    }

    var echo: Tendermint_Abci_Types_ResponseEcho {
        get {
            if case let .echo(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseEcho()
        }
        set { value = .echo(newValue) }
    }

    var flush: Tendermint_Abci_Types_ResponseFlush {
        get {
            if case let .flush(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseFlush()
        }
        set { value = .flush(newValue) }
    }

    var info: Tendermint_Abci_Types_ResponseInfo {
        get {
            if case let .info(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseInfo()
        }
        set { value = .info(newValue) }
    }

    var setOption: Tendermint_Abci_Types_ResponseSetOption {
        get {
            if case let .setOption(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseSetOption()
        }
        set { value = .setOption(newValue) }
    }

    var initChain: Tendermint_Abci_Types_ResponseInitChain {
        get {
            if case let .initChain(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseInitChain()
        }
        set { value = .initChain(newValue) }
    }

    var query: Tendermint_Abci_Types_ResponseQuery {
        get {
            if case let .query(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseQuery()
        }
        set { value = .query(newValue) }
    }

    var beginBlock: Tendermint_Abci_Types_ResponseBeginBlock {
        get {
            if case let .beginBlock(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseBeginBlock()
        }
        set { value = .beginBlock(newValue) }
    }

    var checkTx: Tendermint_Abci_Types_ResponseCheckTx {
        get {
            if case let .checkTx(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseCheckTx()
        }
        set { value = .checkTx(newValue) }
    }

    var deliverTx: Tendermint_Abci_Types_ResponseDeliverTx {
        get {
            if case let .deliverTx(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseDeliverTx()
        }
        set { value = .deliverTx(newValue) }
    }

    var endBlock: Tendermint_Abci_Types_ResponseEndBlock {
        get {
            if case let .endBlock(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseEndBlock()
        }
        set { value = .endBlock(newValue) }
    }

    var commit: Tendermint_Abci_Types_ResponseCommit {
        get {
            if case let .commit(v)? = value { return v }
            return Tendermint_Abci_Types_ResponseCommit()
        }
        set { value = .commit(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Value: Equatable {
        case exception(Tendermint_Abci_Types_ResponseException)
        case echo(Tendermint_Abci_Types_ResponseEcho)
        case flush(Tendermint_Abci_Types_ResponseFlush)
        case info(Tendermint_Abci_Types_ResponseInfo)
        case setOption(Tendermint_Abci_Types_ResponseSetOption)
        case initChain(Tendermint_Abci_Types_ResponseInitChain)
        case query(Tendermint_Abci_Types_ResponseQuery)
        case beginBlock(Tendermint_Abci_Types_ResponseBeginBlock)
        case checkTx(Tendermint_Abci_Types_ResponseCheckTx)
        case deliverTx(Tendermint_Abci_Types_ResponseDeliverTx)
        case endBlock(Tendermint_Abci_Types_ResponseEndBlock)
        case commit(Tendermint_Abci_Types_ResponseCommit)

        #if !swift(>=4.1)
            static func == (lhs: Tendermint_Abci_Types_Response.OneOf_Value, rhs: Tendermint_Abci_Types_Response.OneOf_Value) -> Bool {
                switch (lhs, rhs) {
                case let (.exception(l), .exception(r)): return l == r
                case let (.echo(l), .echo(r)): return l == r
                case let (.flush(l), .flush(r)): return l == r
                case let (.info(l), .info(r)): return l == r
                case let (.setOption(l), .setOption(r)): return l == r
                case let (.initChain(l), .initChain(r)): return l == r
                case let (.query(l), .query(r)): return l == r
                case let (.beginBlock(l), .beginBlock(r)): return l == r
                case let (.checkTx(l), .checkTx(r)): return l == r
                case let (.deliverTx(l), .deliverTx(r)): return l == r
                case let (.endBlock(l), .endBlock(r)): return l == r
                case let (.commit(l), .commit(r)): return l == r
                default: return false
                }
            }
        #endif
    }

    init() {}
}

/// nondeterministic
struct Tendermint_Abci_Types_ResponseException {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var error: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseEcho {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var message: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseFlush {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: String = String()

    var version: String = String()

    var appVersion: UInt64 = 0

    var lastBlockHeight: Int64 = 0

    var lastBlockAppHash: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// nondeterministic
struct Tendermint_Abci_Types_ResponseSetOption {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: UInt32 = 0

    /// bytes data = 2;
    var log: String = String()

    var info: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseInitChain {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var consensusParams: Tendermint_Abci_Types_ConsensusParams {
        get { return _consensusParams ?? Tendermint_Abci_Types_ConsensusParams() }
        set { _consensusParams = newValue }
    }

    /// Returns true if `consensusParams` has been explicitly set.
    var hasConsensusParams: Bool { return self._consensusParams != nil }
    /// Clears the value of `consensusParams`. Subsequent reads from it will return its default value.
    mutating func clearConsensusParams() { _consensusParams = nil }

    var validators: [Tendermint_Abci_Types_ValidatorUpdate] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _consensusParams: Tendermint_Abci_Types_ConsensusParams?
}

struct Tendermint_Abci_Types_ResponseQuery {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: UInt32 = 0

    /// bytes data = 2; // use "value" instead.
    var log: String = String()

    /// nondeterministic
    var info: String = String()

    var index: Int64 = 0

    var key: Data = SwiftProtobuf.Internal.emptyData

    var value: Data = SwiftProtobuf.Internal.emptyData

    var proof: Tendermint_Crypto_Merkle_Proof {
        get { return _proof ?? Tendermint_Crypto_Merkle_Proof() }
        set { _proof = newValue }
    }

    /// Returns true if `proof` has been explicitly set.
    var hasProof: Bool { return self._proof != nil }
    /// Clears the value of `proof`. Subsequent reads from it will return its default value.
    mutating func clearProof() { _proof = nil }

    var height: Int64 = 0

    var codespace: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _proof: Tendermint_Crypto_Merkle_Proof?
}

struct Tendermint_Abci_Types_ResponseBeginBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var events: [Tendermint_Abci_Types_Event] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseCheckTx {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: UInt32 = 0

    var data: Data = SwiftProtobuf.Internal.emptyData

    /// nondeterministic
    var log: String = String()

    /// nondeterministic
    var info: String = String()

    var gasWanted: Int64 = 0

    var gasUsed: Int64 = 0

    var events: [Tendermint_Abci_Types_Event] = []

    var codespace: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseDeliverTx {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var code: UInt32 = 0

    var data: Data = SwiftProtobuf.Internal.emptyData

    /// nondeterministic
    var log: String = String()

    /// nondeterministic
    var info: String = String()

    var gasWanted: Int64 = 0

    var gasUsed: Int64 = 0

    var events: [Tendermint_Abci_Types_Event] = []

    var codespace: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_ResponseEndBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var validatorUpdates: [Tendermint_Abci_Types_ValidatorUpdate] = []

    var consensusParamUpdates: Tendermint_Abci_Types_ConsensusParams {
        get { return _consensusParamUpdates ?? Tendermint_Abci_Types_ConsensusParams() }
        set { _consensusParamUpdates = newValue }
    }

    /// Returns true if `consensusParamUpdates` has been explicitly set.
    var hasConsensusParamUpdates: Bool { return self._consensusParamUpdates != nil }
    /// Clears the value of `consensusParamUpdates`. Subsequent reads from it will return its default value.
    mutating func clearConsensusParamUpdates() { _consensusParamUpdates = nil }

    var events: [Tendermint_Abci_Types_Event] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _consensusParamUpdates: Tendermint_Abci_Types_ConsensusParams?
}

struct Tendermint_Abci_Types_ResponseCommit {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// reserve 1
    var data: Data = SwiftProtobuf.Internal.emptyData

    var retainHeight: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// ConsensusParams contains all consensus-relevant parameters
/// that can be adjusted by the abci app
struct Tendermint_Abci_Types_ConsensusParams {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var block: Tendermint_Abci_Types_BlockParams {
        get { return _block ?? Tendermint_Abci_Types_BlockParams() }
        set { _block = newValue }
    }

    /// Returns true if `block` has been explicitly set.
    var hasBlock: Bool { return self._block != nil }
    /// Clears the value of `block`. Subsequent reads from it will return its default value.
    mutating func clearBlock() { _block = nil }

    var evidence: Tendermint_Abci_Types_EvidenceParams {
        get { return _evidence ?? Tendermint_Abci_Types_EvidenceParams() }
        set { _evidence = newValue }
    }

    /// Returns true if `evidence` has been explicitly set.
    var hasEvidence: Bool { return self._evidence != nil }
    /// Clears the value of `evidence`. Subsequent reads from it will return its default value.
    mutating func clearEvidence() { _evidence = nil }

    var validator: Tendermint_Abci_Types_ValidatorParams {
        get { return _validator ?? Tendermint_Abci_Types_ValidatorParams() }
        set { _validator = newValue }
    }

    /// Returns true if `validator` has been explicitly set.
    var hasValidator: Bool { return self._validator != nil }
    /// Clears the value of `validator`. Subsequent reads from it will return its default value.
    mutating func clearValidator() { _validator = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _block: Tendermint_Abci_Types_BlockParams?
    fileprivate var _evidence: Tendermint_Abci_Types_EvidenceParams?
    fileprivate var _validator: Tendermint_Abci_Types_ValidatorParams?
}

/// BlockParams contains limits on the block size.
struct Tendermint_Abci_Types_BlockParams {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Note: must be greater than 0
    var maxBytes: Int64 = 0

    /// Note: must be greater or equal to -1
    var maxGas: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_EvidenceParams {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Note: must be greater than 0
    var maxAgeNumBlocks: Int64 = 0

    var maxAgeDuration: SwiftProtobuf.Google_Protobuf_Duration {
        get { return _maxAgeDuration ?? SwiftProtobuf.Google_Protobuf_Duration() }
        set { _maxAgeDuration = newValue }
    }

    /// Returns true if `maxAgeDuration` has been explicitly set.
    var hasMaxAgeDuration: Bool { return self._maxAgeDuration != nil }
    /// Clears the value of `maxAgeDuration`. Subsequent reads from it will return its default value.
    mutating func clearMaxAgeDuration() { _maxAgeDuration = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _maxAgeDuration: SwiftProtobuf.Google_Protobuf_Duration?
}

/// ValidatorParams contains limits on validators.
struct Tendermint_Abci_Types_ValidatorParams {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pubKeyTypes: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_LastCommitInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var round: Int32 = 0

    var votes: [Tendermint_Abci_Types_VoteInfo] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_Event {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: String = String()

    var attributes: [Tendermint_Libs_Kv_Pair] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_Header {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// basic block info
    var version: Tendermint_Abci_Types_Version {
        get { return _version ?? Tendermint_Abci_Types_Version() }
        set { _version = newValue }
    }

    /// Returns true if `version` has been explicitly set.
    var hasVersion: Bool { return self._version != nil }
    /// Clears the value of `version`. Subsequent reads from it will return its default value.
    mutating func clearVersion() { _version = nil }

    var chainID: String = String()

    var height: Int64 = 0

    var time: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _time = newValue }
    }

    /// Returns true if `time` has been explicitly set.
    var hasTime: Bool { return self._time != nil }
    /// Clears the value of `time`. Subsequent reads from it will return its default value.
    mutating func clearTime() { _time = nil }

    /// prev block info
    var lastBlockID: Tendermint_Abci_Types_BlockID {
        get { return _lastBlockID ?? Tendermint_Abci_Types_BlockID() }
        set { _lastBlockID = newValue }
    }

    /// Returns true if `lastBlockID` has been explicitly set.
    var hasLastBlockID: Bool { return self._lastBlockID != nil }
    /// Clears the value of `lastBlockID`. Subsequent reads from it will return its default value.
    mutating func clearLastBlockID() { _lastBlockID = nil }

    /// hashes of block data
    var lastCommitHash: Data = SwiftProtobuf.Internal.emptyData

    /// transactions
    var dataHash: Data = SwiftProtobuf.Internal.emptyData

    /// hashes from the app output from the prev block
    var validatorsHash: Data = SwiftProtobuf.Internal.emptyData

    /// validators for the next block
    var nextValidatorsHash: Data = SwiftProtobuf.Internal.emptyData

    /// consensus params for current block
    var consensusHash: Data = SwiftProtobuf.Internal.emptyData

    /// state after txs from the previous block
    var appHash: Data = SwiftProtobuf.Internal.emptyData

    /// root hash of all results from the txs from the previous block
    var lastResultsHash: Data = SwiftProtobuf.Internal.emptyData

    /// consensus info
    var evidenceHash: Data = SwiftProtobuf.Internal.emptyData

    /// original proposer of the block
    var proposerAddress: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _version: Tendermint_Abci_Types_Version?
    fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _lastBlockID: Tendermint_Abci_Types_BlockID?
}

struct Tendermint_Abci_Types_Version {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var block: UInt64 = 0

    var app: UInt64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_BlockID {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var hash: Data = SwiftProtobuf.Internal.emptyData

    var partsHeader: Tendermint_Abci_Types_PartSetHeader {
        get { return _partsHeader ?? Tendermint_Abci_Types_PartSetHeader() }
        set { _partsHeader = newValue }
    }

    /// Returns true if `partsHeader` has been explicitly set.
    var hasPartsHeader: Bool { return self._partsHeader != nil }
    /// Clears the value of `partsHeader`. Subsequent reads from it will return its default value.
    mutating func clearPartsHeader() { _partsHeader = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _partsHeader: Tendermint_Abci_Types_PartSetHeader?
}

struct Tendermint_Abci_Types_PartSetHeader {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var total: Int32 = 0

    var hash: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// Validator
struct Tendermint_Abci_Types_Validator {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var address: Data = SwiftProtobuf.Internal.emptyData

    /// PubKey pub_key = 2 [(gogoproto.nullable)=false];
    var power: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// ValidatorUpdate
struct Tendermint_Abci_Types_ValidatorUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var pubKey: Tendermint_Abci_Types_PubKey {
        get { return _pubKey ?? Tendermint_Abci_Types_PubKey() }
        set { _pubKey = newValue }
    }

    /// Returns true if `pubKey` has been explicitly set.
    var hasPubKey: Bool { return self._pubKey != nil }
    /// Clears the value of `pubKey`. Subsequent reads from it will return its default value.
    mutating func clearPubKey() { _pubKey = nil }

    var power: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _pubKey: Tendermint_Abci_Types_PubKey?
}

/// VoteInfo
struct Tendermint_Abci_Types_VoteInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var validator: Tendermint_Abci_Types_Validator {
        get { return _validator ?? Tendermint_Abci_Types_Validator() }
        set { _validator = newValue }
    }

    /// Returns true if `validator` has been explicitly set.
    var hasValidator: Bool { return self._validator != nil }
    /// Clears the value of `validator`. Subsequent reads from it will return its default value.
    mutating func clearValidator() { _validator = nil }

    var signedLastBlock: Bool = false

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _validator: Tendermint_Abci_Types_Validator?
}

struct Tendermint_Abci_Types_PubKey {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: String = String()

    var data: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Tendermint_Abci_Types_Evidence {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: String = String()

    var validator: Tendermint_Abci_Types_Validator {
        get { return _validator ?? Tendermint_Abci_Types_Validator() }
        set { _validator = newValue }
    }

    /// Returns true if `validator` has been explicitly set.
    var hasValidator: Bool { return self._validator != nil }
    /// Clears the value of `validator`. Subsequent reads from it will return its default value.
    mutating func clearValidator() { _validator = nil }

    var height: Int64 = 0

    var time: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { return _time ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _time = newValue }
    }

    /// Returns true if `time` has been explicitly set.
    var hasTime: Bool { return self._time != nil }
    /// Clears the value of `time`. Subsequent reads from it will return its default value.
    mutating func clearTime() { _time = nil }

    var totalVotingPower: Int64 = 0

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _validator: Tendermint_Abci_Types_Validator?
    fileprivate var _time: SwiftProtobuf.Google_Protobuf_Timestamp?
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "tendermint.abci.types"

extension Tendermint_Abci_Types_CheckTxType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "New"),
        1: .same(proto: "Recheck"),
    ]
}

extension Tendermint_Abci_Types_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Request"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "echo"),
        3: .same(proto: "flush"),
        4: .same(proto: "info"),
        5: .standard(proto: "set_option"),
        6: .standard(proto: "init_chain"),
        7: .same(proto: "query"),
        8: .standard(proto: "begin_block"),
        9: .standard(proto: "check_tx"),
        19: .standard(proto: "deliver_tx"),
        11: .standard(proto: "end_block"),
        12: .same(proto: "commit"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 2:
                var v: Tendermint_Abci_Types_RequestEcho?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .echo(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .echo(v) }
            case 3:
                var v: Tendermint_Abci_Types_RequestFlush?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .flush(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .flush(v) }
            case 4:
                var v: Tendermint_Abci_Types_RequestInfo?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .info(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .info(v) }
            case 5:
                var v: Tendermint_Abci_Types_RequestSetOption?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .setOption(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .setOption(v) }
            case 6:
                var v: Tendermint_Abci_Types_RequestInitChain?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .initChain(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .initChain(v) }
            case 7:
                var v: Tendermint_Abci_Types_RequestQuery?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .query(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .query(v) }
            case 8:
                var v: Tendermint_Abci_Types_RequestBeginBlock?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .beginBlock(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .beginBlock(v) }
            case 9:
                var v: Tendermint_Abci_Types_RequestCheckTx?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .checkTx(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .checkTx(v) }
            case 11:
                var v: Tendermint_Abci_Types_RequestEndBlock?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .endBlock(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .endBlock(v) }
            case 12:
                var v: Tendermint_Abci_Types_RequestCommit?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .commit(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .commit(v) }
            case 19:
                var v: Tendermint_Abci_Types_RequestDeliverTx?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .deliverTx(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .deliverTx(v) }
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        switch value {
        case let .echo(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        case let .flush(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        case let .info(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        case let .setOption(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        case let .initChain(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        case let .query(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        case let .beginBlock(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        case let .checkTx(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
        case let .endBlock(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        case let .commit(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
        case let .deliverTx(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Request, rhs: Tendermint_Abci_Types_Request) -> Bool {
        if lhs.value != rhs.value { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestEcho: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestEcho"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "message"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &message)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !message.isEmpty {
            try visitor.visitSingularStringField(value: message, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestEcho, rhs: Tendermint_Abci_Types_RequestEcho) -> Bool {
        if lhs.message != rhs.message { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestFlush: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestFlush"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestFlush, rhs: Tendermint_Abci_Types_RequestFlush) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .standard(proto: "block_version"),
        3: .standard(proto: "p2p_version"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &version)
            case 2: try decoder.decodeSingularUInt64Field(value: &blockVersion)
            case 3: try decoder.decodeSingularUInt64Field(value: &p2PVersion)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 1)
        }
        if blockVersion != 0 {
            try visitor.visitSingularUInt64Field(value: blockVersion, fieldNumber: 2)
        }
        if p2PVersion != 0 {
            try visitor.visitSingularUInt64Field(value: p2PVersion, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestInfo, rhs: Tendermint_Abci_Types_RequestInfo) -> Bool {
        if lhs.version != rhs.version { return false }
        if lhs.blockVersion != rhs.blockVersion { return false }
        if lhs.p2PVersion != rhs.p2PVersion { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestSetOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestSetOption"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "key"),
        2: .same(proto: "value"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &key)
            case 2: try decoder.decodeSingularStringField(value: &value)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !key.isEmpty {
            try visitor.visitSingularStringField(value: key, fieldNumber: 1)
        }
        if !value.isEmpty {
            try visitor.visitSingularStringField(value: value, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestSetOption, rhs: Tendermint_Abci_Types_RequestSetOption) -> Bool {
        if lhs.key != rhs.key { return false }
        if lhs.value != rhs.value { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestInitChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestInitChain"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "time"),
        2: .standard(proto: "chain_id"),
        3: .standard(proto: "consensus_params"),
        4: .same(proto: "validators"),
        5: .standard(proto: "app_state_bytes"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_time)
            case 2: try decoder.decodeSingularStringField(value: &chainID)
            case 3: try decoder.decodeSingularMessageField(value: &_consensusParams)
            case 4: try decoder.decodeRepeatedMessageField(value: &validators)
            case 5: try decoder.decodeSingularBytesField(value: &appStateBytes)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _time {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !chainID.isEmpty {
            try visitor.visitSingularStringField(value: chainID, fieldNumber: 2)
        }
        if let v = _consensusParams {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if !validators.isEmpty {
            try visitor.visitRepeatedMessageField(value: validators, fieldNumber: 4)
        }
        if !appStateBytes.isEmpty {
            try visitor.visitSingularBytesField(value: appStateBytes, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestInitChain, rhs: Tendermint_Abci_Types_RequestInitChain) -> Bool {
        if lhs._time != rhs._time { return false }
        if lhs.chainID != rhs.chainID { return false }
        if lhs._consensusParams != rhs._consensusParams { return false }
        if lhs.validators != rhs.validators { return false }
        if lhs.appStateBytes != rhs.appStateBytes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestQuery"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "data"),
        2: .same(proto: "path"),
        3: .same(proto: "height"),
        4: .same(proto: "prove"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &data)
            case 2: try decoder.decodeSingularStringField(value: &path)
            case 3: try decoder.decodeSingularInt64Field(value: &height)
            case 4: try decoder.decodeSingularBoolField(value: &prove)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !data.isEmpty {
            try visitor.visitSingularBytesField(value: data, fieldNumber: 1)
        }
        if !path.isEmpty {
            try visitor.visitSingularStringField(value: path, fieldNumber: 2)
        }
        if height != 0 {
            try visitor.visitSingularInt64Field(value: height, fieldNumber: 3)
        }
        if prove != false {
            try visitor.visitSingularBoolField(value: prove, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestQuery, rhs: Tendermint_Abci_Types_RequestQuery) -> Bool {
        if lhs.data != rhs.data { return false }
        if lhs.path != rhs.path { return false }
        if lhs.height != rhs.height { return false }
        if lhs.prove != rhs.prove { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestBeginBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestBeginBlock"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "hash"),
        2: .same(proto: "header"),
        3: .standard(proto: "last_commit_info"),
        4: .standard(proto: "byzantine_validators"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &hash)
            case 2: try decoder.decodeSingularMessageField(value: &_header)
            case 3: try decoder.decodeSingularMessageField(value: &_lastCommitInfo)
            case 4: try decoder.decodeRepeatedMessageField(value: &byzantineValidators)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !hash.isEmpty {
            try visitor.visitSingularBytesField(value: hash, fieldNumber: 1)
        }
        if let v = _header {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        if let v = _lastCommitInfo {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        if !byzantineValidators.isEmpty {
            try visitor.visitRepeatedMessageField(value: byzantineValidators, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestBeginBlock, rhs: Tendermint_Abci_Types_RequestBeginBlock) -> Bool {
        if lhs.hash != rhs.hash { return false }
        if lhs._header != rhs._header { return false }
        if lhs._lastCommitInfo != rhs._lastCommitInfo { return false }
        if lhs.byzantineValidators != rhs.byzantineValidators { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestCheckTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestCheckTx"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "tx"),
        2: .same(proto: "type"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &tx)
            case 2: try decoder.decodeSingularEnumField(value: &type)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !tx.isEmpty {
            try visitor.visitSingularBytesField(value: tx, fieldNumber: 1)
        }
        if type != .new {
            try visitor.visitSingularEnumField(value: type, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestCheckTx, rhs: Tendermint_Abci_Types_RequestCheckTx) -> Bool {
        if lhs.tx != rhs.tx { return false }
        if lhs.type != rhs.type { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestDeliverTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestDeliverTx"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "tx"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &tx)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !tx.isEmpty {
            try visitor.visitSingularBytesField(value: tx, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestDeliverTx, rhs: Tendermint_Abci_Types_RequestDeliverTx) -> Bool {
        if lhs.tx != rhs.tx { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestEndBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestEndBlock"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "height"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &height)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if height != 0 {
            try visitor.visitSingularInt64Field(value: height, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestEndBlock, rhs: Tendermint_Abci_Types_RequestEndBlock) -> Bool {
        if lhs.height != rhs.height { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_RequestCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RequestCommit"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_RequestCommit, rhs: Tendermint_Abci_Types_RequestCommit) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Response"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "exception"),
        2: .same(proto: "echo"),
        3: .same(proto: "flush"),
        4: .same(proto: "info"),
        5: .standard(proto: "set_option"),
        6: .standard(proto: "init_chain"),
        7: .same(proto: "query"),
        8: .standard(proto: "begin_block"),
        9: .standard(proto: "check_tx"),
        10: .standard(proto: "deliver_tx"),
        11: .standard(proto: "end_block"),
        12: .same(proto: "commit"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1:
                var v: Tendermint_Abci_Types_ResponseException?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .exception(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .exception(v) }
            case 2:
                var v: Tendermint_Abci_Types_ResponseEcho?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .echo(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .echo(v) }
            case 3:
                var v: Tendermint_Abci_Types_ResponseFlush?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .flush(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .flush(v) }
            case 4:
                var v: Tendermint_Abci_Types_ResponseInfo?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .info(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .info(v) }
            case 5:
                var v: Tendermint_Abci_Types_ResponseSetOption?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .setOption(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .setOption(v) }
            case 6:
                var v: Tendermint_Abci_Types_ResponseInitChain?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .initChain(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .initChain(v) }
            case 7:
                var v: Tendermint_Abci_Types_ResponseQuery?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .query(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .query(v) }
            case 8:
                var v: Tendermint_Abci_Types_ResponseBeginBlock?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .beginBlock(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .beginBlock(v) }
            case 9:
                var v: Tendermint_Abci_Types_ResponseCheckTx?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .checkTx(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .checkTx(v) }
            case 10:
                var v: Tendermint_Abci_Types_ResponseDeliverTx?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .deliverTx(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .deliverTx(v) }
            case 11:
                var v: Tendermint_Abci_Types_ResponseEndBlock?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .endBlock(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .endBlock(v) }
            case 12:
                var v: Tendermint_Abci_Types_ResponseCommit?
                if let current = value {
                    try decoder.handleConflictingOneOf()
                    if case let .commit(m) = current { v = m }
                }
                try decoder.decodeSingularMessageField(value: &v)
                if let v = v { value = .commit(v) }
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        switch value {
        case let .exception(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        case let .echo(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        case let .flush(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        case let .info(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        case let .setOption(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        case let .initChain(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
        case let .query(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        case let .beginBlock(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        case let .checkTx(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
        case let .deliverTx(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
        case let .endBlock(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
        case let .commit(v)?:
            try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Response, rhs: Tendermint_Abci_Types_Response) -> Bool {
        if lhs.value != rhs.value { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseException: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseException"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "error"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &error)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !error.isEmpty {
            try visitor.visitSingularStringField(value: error, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseException, rhs: Tendermint_Abci_Types_ResponseException) -> Bool {
        if lhs.error != rhs.error { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseEcho: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseEcho"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "message"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &message)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !message.isEmpty {
            try visitor.visitSingularStringField(value: message, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseEcho, rhs: Tendermint_Abci_Types_ResponseEcho) -> Bool {
        if lhs.message != rhs.message { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseFlush: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseFlush"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseFlush, rhs: Tendermint_Abci_Types_ResponseFlush) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "data"),
        2: .same(proto: "version"),
        3: .standard(proto: "app_version"),
        4: .standard(proto: "last_block_height"),
        5: .standard(proto: "last_block_app_hash"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &data)
            case 2: try decoder.decodeSingularStringField(value: &version)
            case 3: try decoder.decodeSingularUInt64Field(value: &appVersion)
            case 4: try decoder.decodeSingularInt64Field(value: &lastBlockHeight)
            case 5: try decoder.decodeSingularBytesField(value: &lastBlockAppHash)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !data.isEmpty {
            try visitor.visitSingularStringField(value: data, fieldNumber: 1)
        }
        if !version.isEmpty {
            try visitor.visitSingularStringField(value: version, fieldNumber: 2)
        }
        if appVersion != 0 {
            try visitor.visitSingularUInt64Field(value: appVersion, fieldNumber: 3)
        }
        if lastBlockHeight != 0 {
            try visitor.visitSingularInt64Field(value: lastBlockHeight, fieldNumber: 4)
        }
        if !lastBlockAppHash.isEmpty {
            try visitor.visitSingularBytesField(value: lastBlockAppHash, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseInfo, rhs: Tendermint_Abci_Types_ResponseInfo) -> Bool {
        if lhs.data != rhs.data { return false }
        if lhs.version != rhs.version { return false }
        if lhs.appVersion != rhs.appVersion { return false }
        if lhs.lastBlockHeight != rhs.lastBlockHeight { return false }
        if lhs.lastBlockAppHash != rhs.lastBlockAppHash { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseSetOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseSetOption"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        3: .same(proto: "log"),
        4: .same(proto: "info"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &code)
            case 3: try decoder.decodeSingularStringField(value: &log)
            case 4: try decoder.decodeSingularStringField(value: &info)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if code != 0 {
            try visitor.visitSingularUInt32Field(value: code, fieldNumber: 1)
        }
        if !log.isEmpty {
            try visitor.visitSingularStringField(value: log, fieldNumber: 3)
        }
        if !info.isEmpty {
            try visitor.visitSingularStringField(value: info, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseSetOption, rhs: Tendermint_Abci_Types_ResponseSetOption) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.log != rhs.log { return false }
        if lhs.info != rhs.info { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseInitChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseInitChain"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "consensus_params"),
        2: .same(proto: "validators"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_consensusParams)
            case 2: try decoder.decodeRepeatedMessageField(value: &validators)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _consensusParams {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !validators.isEmpty {
            try visitor.visitRepeatedMessageField(value: validators, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseInitChain, rhs: Tendermint_Abci_Types_ResponseInitChain) -> Bool {
        if lhs._consensusParams != rhs._consensusParams { return false }
        if lhs.validators != rhs.validators { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseQuery"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        3: .same(proto: "log"),
        4: .same(proto: "info"),
        5: .same(proto: "index"),
        6: .same(proto: "key"),
        7: .same(proto: "value"),
        8: .same(proto: "proof"),
        9: .same(proto: "height"),
        10: .same(proto: "codespace"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &code)
            case 3: try decoder.decodeSingularStringField(value: &log)
            case 4: try decoder.decodeSingularStringField(value: &info)
            case 5: try decoder.decodeSingularInt64Field(value: &index)
            case 6: try decoder.decodeSingularBytesField(value: &key)
            case 7: try decoder.decodeSingularBytesField(value: &value)
            case 8: try decoder.decodeSingularMessageField(value: &_proof)
            case 9: try decoder.decodeSingularInt64Field(value: &height)
            case 10: try decoder.decodeSingularStringField(value: &codespace)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if code != 0 {
            try visitor.visitSingularUInt32Field(value: code, fieldNumber: 1)
        }
        if !log.isEmpty {
            try visitor.visitSingularStringField(value: log, fieldNumber: 3)
        }
        if !info.isEmpty {
            try visitor.visitSingularStringField(value: info, fieldNumber: 4)
        }
        if index != 0 {
            try visitor.visitSingularInt64Field(value: index, fieldNumber: 5)
        }
        if !key.isEmpty {
            try visitor.visitSingularBytesField(value: key, fieldNumber: 6)
        }
        if !value.isEmpty {
            try visitor.visitSingularBytesField(value: value, fieldNumber: 7)
        }
        if let v = _proof {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        }
        if height != 0 {
            try visitor.visitSingularInt64Field(value: height, fieldNumber: 9)
        }
        if !codespace.isEmpty {
            try visitor.visitSingularStringField(value: codespace, fieldNumber: 10)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseQuery, rhs: Tendermint_Abci_Types_ResponseQuery) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.log != rhs.log { return false }
        if lhs.info != rhs.info { return false }
        if lhs.index != rhs.index { return false }
        if lhs.key != rhs.key { return false }
        if lhs.value != rhs.value { return false }
        if lhs._proof != rhs._proof { return false }
        if lhs.height != rhs.height { return false }
        if lhs.codespace != rhs.codespace { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseBeginBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseBeginBlock"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "events"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &events)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseBeginBlock, rhs: Tendermint_Abci_Types_ResponseBeginBlock) -> Bool {
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseCheckTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseCheckTx"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        2: .same(proto: "data"),
        3: .same(proto: "log"),
        4: .same(proto: "info"),
        5: .standard(proto: "gas_wanted"),
        6: .standard(proto: "gas_used"),
        7: .same(proto: "events"),
        8: .same(proto: "codespace"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &code)
            case 2: try decoder.decodeSingularBytesField(value: &data)
            case 3: try decoder.decodeSingularStringField(value: &log)
            case 4: try decoder.decodeSingularStringField(value: &info)
            case 5: try decoder.decodeSingularInt64Field(value: &gasWanted)
            case 6: try decoder.decodeSingularInt64Field(value: &gasUsed)
            case 7: try decoder.decodeRepeatedMessageField(value: &events)
            case 8: try decoder.decodeSingularStringField(value: &codespace)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if code != 0 {
            try visitor.visitSingularUInt32Field(value: code, fieldNumber: 1)
        }
        if !data.isEmpty {
            try visitor.visitSingularBytesField(value: data, fieldNumber: 2)
        }
        if !log.isEmpty {
            try visitor.visitSingularStringField(value: log, fieldNumber: 3)
        }
        if !info.isEmpty {
            try visitor.visitSingularStringField(value: info, fieldNumber: 4)
        }
        if gasWanted != 0 {
            try visitor.visitSingularInt64Field(value: gasWanted, fieldNumber: 5)
        }
        if gasUsed != 0 {
            try visitor.visitSingularInt64Field(value: gasUsed, fieldNumber: 6)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 7)
        }
        if !codespace.isEmpty {
            try visitor.visitSingularStringField(value: codespace, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseCheckTx, rhs: Tendermint_Abci_Types_ResponseCheckTx) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.data != rhs.data { return false }
        if lhs.log != rhs.log { return false }
        if lhs.info != rhs.info { return false }
        if lhs.gasWanted != rhs.gasWanted { return false }
        if lhs.gasUsed != rhs.gasUsed { return false }
        if lhs.events != rhs.events { return false }
        if lhs.codespace != rhs.codespace { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseDeliverTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseDeliverTx"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "code"),
        2: .same(proto: "data"),
        3: .same(proto: "log"),
        4: .same(proto: "info"),
        5: .standard(proto: "gas_wanted"),
        6: .standard(proto: "gas_used"),
        7: .same(proto: "events"),
        8: .same(proto: "codespace"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt32Field(value: &code)
            case 2: try decoder.decodeSingularBytesField(value: &data)
            case 3: try decoder.decodeSingularStringField(value: &log)
            case 4: try decoder.decodeSingularStringField(value: &info)
            case 5: try decoder.decodeSingularInt64Field(value: &gasWanted)
            case 6: try decoder.decodeSingularInt64Field(value: &gasUsed)
            case 7: try decoder.decodeRepeatedMessageField(value: &events)
            case 8: try decoder.decodeSingularStringField(value: &codespace)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if code != 0 {
            try visitor.visitSingularUInt32Field(value: code, fieldNumber: 1)
        }
        if !data.isEmpty {
            try visitor.visitSingularBytesField(value: data, fieldNumber: 2)
        }
        if !log.isEmpty {
            try visitor.visitSingularStringField(value: log, fieldNumber: 3)
        }
        if !info.isEmpty {
            try visitor.visitSingularStringField(value: info, fieldNumber: 4)
        }
        if gasWanted != 0 {
            try visitor.visitSingularInt64Field(value: gasWanted, fieldNumber: 5)
        }
        if gasUsed != 0 {
            try visitor.visitSingularInt64Field(value: gasUsed, fieldNumber: 6)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 7)
        }
        if !codespace.isEmpty {
            try visitor.visitSingularStringField(value: codespace, fieldNumber: 8)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseDeliverTx, rhs: Tendermint_Abci_Types_ResponseDeliverTx) -> Bool {
        if lhs.code != rhs.code { return false }
        if lhs.data != rhs.data { return false }
        if lhs.log != rhs.log { return false }
        if lhs.info != rhs.info { return false }
        if lhs.gasWanted != rhs.gasWanted { return false }
        if lhs.gasUsed != rhs.gasUsed { return false }
        if lhs.events != rhs.events { return false }
        if lhs.codespace != rhs.codespace { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseEndBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseEndBlock"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "validator_updates"),
        2: .standard(proto: "consensus_param_updates"),
        3: .same(proto: "events"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &validatorUpdates)
            case 2: try decoder.decodeSingularMessageField(value: &_consensusParamUpdates)
            case 3: try decoder.decodeRepeatedMessageField(value: &events)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !validatorUpdates.isEmpty {
            try visitor.visitRepeatedMessageField(value: validatorUpdates, fieldNumber: 1)
        }
        if let v = _consensusParamUpdates {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseEndBlock, rhs: Tendermint_Abci_Types_ResponseEndBlock) -> Bool {
        if lhs.validatorUpdates != rhs.validatorUpdates { return false }
        if lhs._consensusParamUpdates != rhs._consensusParamUpdates { return false }
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ResponseCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ResponseCommit"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        2: .same(proto: "data"),
        3: .standard(proto: "retain_height"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 2: try decoder.decodeSingularBytesField(value: &data)
            case 3: try decoder.decodeSingularInt64Field(value: &retainHeight)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !data.isEmpty {
            try visitor.visitSingularBytesField(value: data, fieldNumber: 2)
        }
        if retainHeight != 0 {
            try visitor.visitSingularInt64Field(value: retainHeight, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ResponseCommit, rhs: Tendermint_Abci_Types_ResponseCommit) -> Bool {
        if lhs.data != rhs.data { return false }
        if lhs.retainHeight != rhs.retainHeight { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ConsensusParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ConsensusParams"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "block"),
        2: .same(proto: "evidence"),
        3: .same(proto: "validator"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_block)
            case 2: try decoder.decodeSingularMessageField(value: &_evidence)
            case 3: try decoder.decodeSingularMessageField(value: &_validator)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _block {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _evidence {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        if let v = _validator {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ConsensusParams, rhs: Tendermint_Abci_Types_ConsensusParams) -> Bool {
        if lhs._block != rhs._block { return false }
        if lhs._evidence != rhs._evidence { return false }
        if lhs._validator != rhs._validator { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_BlockParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BlockParams"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "max_bytes"),
        2: .standard(proto: "max_gas"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &maxBytes)
            case 2: try decoder.decodeSingularInt64Field(value: &maxGas)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if maxBytes != 0 {
            try visitor.visitSingularInt64Field(value: maxBytes, fieldNumber: 1)
        }
        if maxGas != 0 {
            try visitor.visitSingularInt64Field(value: maxGas, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_BlockParams, rhs: Tendermint_Abci_Types_BlockParams) -> Bool {
        if lhs.maxBytes != rhs.maxBytes { return false }
        if lhs.maxGas != rhs.maxGas { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_EvidenceParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".EvidenceParams"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "max_age_num_blocks"),
        2: .standard(proto: "max_age_duration"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt64Field(value: &maxAgeNumBlocks)
            case 2: try decoder.decodeSingularMessageField(value: &_maxAgeDuration)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if maxAgeNumBlocks != 0 {
            try visitor.visitSingularInt64Field(value: maxAgeNumBlocks, fieldNumber: 1)
        }
        if let v = _maxAgeDuration {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_EvidenceParams, rhs: Tendermint_Abci_Types_EvidenceParams) -> Bool {
        if lhs.maxAgeNumBlocks != rhs.maxAgeNumBlocks { return false }
        if lhs._maxAgeDuration != rhs._maxAgeDuration { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ValidatorParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ValidatorParams"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "pub_key_types"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedStringField(value: &pubKeyTypes)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !pubKeyTypes.isEmpty {
            try visitor.visitRepeatedStringField(value: pubKeyTypes, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ValidatorParams, rhs: Tendermint_Abci_Types_ValidatorParams) -> Bool {
        if lhs.pubKeyTypes != rhs.pubKeyTypes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_LastCommitInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".LastCommitInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "round"),
        2: .same(proto: "votes"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &round)
            case 2: try decoder.decodeRepeatedMessageField(value: &votes)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if round != 0 {
            try visitor.visitSingularInt32Field(value: round, fieldNumber: 1)
        }
        if !votes.isEmpty {
            try visitor.visitRepeatedMessageField(value: votes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_LastCommitInfo, rhs: Tendermint_Abci_Types_LastCommitInfo) -> Bool {
        if lhs.round != rhs.round { return false }
        if lhs.votes != rhs.votes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Event"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "attributes"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &type)
            case 2: try decoder.decodeRepeatedMessageField(value: &attributes)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 1)
        }
        if !attributes.isEmpty {
            try visitor.visitRepeatedMessageField(value: attributes, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Event, rhs: Tendermint_Abci_Types_Event) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.attributes != rhs.attributes { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Header"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "version"),
        2: .standard(proto: "chain_id"),
        3: .same(proto: "height"),
        4: .same(proto: "time"),
        5: .standard(proto: "last_block_id"),
        6: .standard(proto: "last_commit_hash"),
        7: .standard(proto: "data_hash"),
        8: .standard(proto: "validators_hash"),
        9: .standard(proto: "next_validators_hash"),
        10: .standard(proto: "consensus_hash"),
        11: .standard(proto: "app_hash"),
        12: .standard(proto: "last_results_hash"),
        13: .standard(proto: "evidence_hash"),
        14: .standard(proto: "proposer_address"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_version)
            case 2: try decoder.decodeSingularStringField(value: &chainID)
            case 3: try decoder.decodeSingularInt64Field(value: &height)
            case 4: try decoder.decodeSingularMessageField(value: &_time)
            case 5: try decoder.decodeSingularMessageField(value: &_lastBlockID)
            case 6: try decoder.decodeSingularBytesField(value: &lastCommitHash)
            case 7: try decoder.decodeSingularBytesField(value: &dataHash)
            case 8: try decoder.decodeSingularBytesField(value: &validatorsHash)
            case 9: try decoder.decodeSingularBytesField(value: &nextValidatorsHash)
            case 10: try decoder.decodeSingularBytesField(value: &consensusHash)
            case 11: try decoder.decodeSingularBytesField(value: &appHash)
            case 12: try decoder.decodeSingularBytesField(value: &lastResultsHash)
            case 13: try decoder.decodeSingularBytesField(value: &evidenceHash)
            case 14: try decoder.decodeSingularBytesField(value: &proposerAddress)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _version {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if !chainID.isEmpty {
            try visitor.visitSingularStringField(value: chainID, fieldNumber: 2)
        }
        if height != 0 {
            try visitor.visitSingularInt64Field(value: height, fieldNumber: 3)
        }
        if let v = _time {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        }
        if let v = _lastBlockID {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        }
        if !lastCommitHash.isEmpty {
            try visitor.visitSingularBytesField(value: lastCommitHash, fieldNumber: 6)
        }
        if !dataHash.isEmpty {
            try visitor.visitSingularBytesField(value: dataHash, fieldNumber: 7)
        }
        if !validatorsHash.isEmpty {
            try visitor.visitSingularBytesField(value: validatorsHash, fieldNumber: 8)
        }
        if !nextValidatorsHash.isEmpty {
            try visitor.visitSingularBytesField(value: nextValidatorsHash, fieldNumber: 9)
        }
        if !consensusHash.isEmpty {
            try visitor.visitSingularBytesField(value: consensusHash, fieldNumber: 10)
        }
        if !appHash.isEmpty {
            try visitor.visitSingularBytesField(value: appHash, fieldNumber: 11)
        }
        if !lastResultsHash.isEmpty {
            try visitor.visitSingularBytesField(value: lastResultsHash, fieldNumber: 12)
        }
        if !evidenceHash.isEmpty {
            try visitor.visitSingularBytesField(value: evidenceHash, fieldNumber: 13)
        }
        if !proposerAddress.isEmpty {
            try visitor.visitSingularBytesField(value: proposerAddress, fieldNumber: 14)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Header, rhs: Tendermint_Abci_Types_Header) -> Bool {
        if lhs._version != rhs._version { return false }
        if lhs.chainID != rhs.chainID { return false }
        if lhs.height != rhs.height { return false }
        if lhs._time != rhs._time { return false }
        if lhs._lastBlockID != rhs._lastBlockID { return false }
        if lhs.lastCommitHash != rhs.lastCommitHash { return false }
        if lhs.dataHash != rhs.dataHash { return false }
        if lhs.validatorsHash != rhs.validatorsHash { return false }
        if lhs.nextValidatorsHash != rhs.nextValidatorsHash { return false }
        if lhs.consensusHash != rhs.consensusHash { return false }
        if lhs.appHash != rhs.appHash { return false }
        if lhs.lastResultsHash != rhs.lastResultsHash { return false }
        if lhs.evidenceHash != rhs.evidenceHash { return false }
        if lhs.proposerAddress != rhs.proposerAddress { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Version: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Version"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "Block"),
        2: .same(proto: "App"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularUInt64Field(value: &block)
            case 2: try decoder.decodeSingularUInt64Field(value: &app)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if block != 0 {
            try visitor.visitSingularUInt64Field(value: block, fieldNumber: 1)
        }
        if app != 0 {
            try visitor.visitSingularUInt64Field(value: app, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Version, rhs: Tendermint_Abci_Types_Version) -> Bool {
        if lhs.block != rhs.block { return false }
        if lhs.app != rhs.app { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_BlockID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".BlockID"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "hash"),
        2: .standard(proto: "parts_header"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &hash)
            case 2: try decoder.decodeSingularMessageField(value: &_partsHeader)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !hash.isEmpty {
            try visitor.visitSingularBytesField(value: hash, fieldNumber: 1)
        }
        if let v = _partsHeader {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_BlockID, rhs: Tendermint_Abci_Types_BlockID) -> Bool {
        if lhs.hash != rhs.hash { return false }
        if lhs._partsHeader != rhs._partsHeader { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_PartSetHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PartSetHeader"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "total"),
        2: .same(proto: "hash"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularInt32Field(value: &total)
            case 2: try decoder.decodeSingularBytesField(value: &hash)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if total != 0 {
            try visitor.visitSingularInt32Field(value: total, fieldNumber: 1)
        }
        if !hash.isEmpty {
            try visitor.visitSingularBytesField(value: hash, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_PartSetHeader, rhs: Tendermint_Abci_Types_PartSetHeader) -> Bool {
        if lhs.total != rhs.total { return false }
        if lhs.hash != rhs.hash { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Validator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Validator"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "address"),
        3: .same(proto: "power"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularBytesField(value: &address)
            case 3: try decoder.decodeSingularInt64Field(value: &power)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !address.isEmpty {
            try visitor.visitSingularBytesField(value: address, fieldNumber: 1)
        }
        if power != 0 {
            try visitor.visitSingularInt64Field(value: power, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Validator, rhs: Tendermint_Abci_Types_Validator) -> Bool {
        if lhs.address != rhs.address { return false }
        if lhs.power != rhs.power { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_ValidatorUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ValidatorUpdate"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "pub_key"),
        2: .same(proto: "power"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_pubKey)
            case 2: try decoder.decodeSingularInt64Field(value: &power)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _pubKey {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if power != 0 {
            try visitor.visitSingularInt64Field(value: power, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_ValidatorUpdate, rhs: Tendermint_Abci_Types_ValidatorUpdate) -> Bool {
        if lhs._pubKey != rhs._pubKey { return false }
        if lhs.power != rhs.power { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_VoteInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".VoteInfo"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "validator"),
        2: .standard(proto: "signed_last_block"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularMessageField(value: &_validator)
            case 2: try decoder.decodeSingularBoolField(value: &signedLastBlock)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if let v = _validator {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if signedLastBlock != false {
            try visitor.visitSingularBoolField(value: signedLastBlock, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_VoteInfo, rhs: Tendermint_Abci_Types_VoteInfo) -> Bool {
        if lhs._validator != rhs._validator { return false }
        if lhs.signedLastBlock != rhs.signedLastBlock { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_PubKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".PubKey"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "data"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &type)
            case 2: try decoder.decodeSingularBytesField(value: &data)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 1)
        }
        if !data.isEmpty {
            try visitor.visitSingularBytesField(value: data, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_PubKey, rhs: Tendermint_Abci_Types_PubKey) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs.data != rhs.data { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Tendermint_Abci_Types_Evidence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Evidence"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "type"),
        2: .same(proto: "validator"),
        3: .same(proto: "height"),
        4: .same(proto: "time"),
        5: .standard(proto: "total_voting_power"),
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &type)
            case 2: try decoder.decodeSingularMessageField(value: &_validator)
            case 3: try decoder.decodeSingularInt64Field(value: &height)
            case 4: try decoder.decodeSingularMessageField(value: &_time)
            case 5: try decoder.decodeSingularInt64Field(value: &totalVotingPower)
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !type.isEmpty {
            try visitor.visitSingularStringField(value: type, fieldNumber: 1)
        }
        if let v = _validator {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        if height != 0 {
            try visitor.visitSingularInt64Field(value: height, fieldNumber: 3)
        }
        if let v = _time {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        }
        if totalVotingPower != 0 {
            try visitor.visitSingularInt64Field(value: totalVotingPower, fieldNumber: 5)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Tendermint_Abci_Types_Evidence, rhs: Tendermint_Abci_Types_Evidence) -> Bool {
        if lhs.type != rhs.type { return false }
        if lhs._validator != rhs._validator { return false }
        if lhs.height != rhs.height { return false }
        if lhs._time != rhs._time { return false }
        if lhs.totalVotingPower != rhs.totalVotingPower { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
