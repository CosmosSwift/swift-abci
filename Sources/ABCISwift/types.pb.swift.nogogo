// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Types_Request: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Request"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var echo: Types_RequestEcho {
    get {
      if case .echo(let v)? = _storage._value {return v}
      return Types_RequestEcho()
    }
    set {_uniqueStorage()._value = .echo(newValue)}
  }

  var flush: Types_RequestFlush {
    get {
      if case .flush(let v)? = _storage._value {return v}
      return Types_RequestFlush()
    }
    set {_uniqueStorage()._value = .flush(newValue)}
  }

  var info: Types_RequestInfo {
    get {
      if case .info(let v)? = _storage._value {return v}
      return Types_RequestInfo()
    }
    set {_uniqueStorage()._value = .info(newValue)}
  }

  var setOption: Types_RequestSetOption {
    get {
      if case .setOption(let v)? = _storage._value {return v}
      return Types_RequestSetOption()
    }
    set {_uniqueStorage()._value = .setOption(newValue)}
  }

  var initChain: Types_RequestInitChain {
    get {
      if case .initChain(let v)? = _storage._value {return v}
      return Types_RequestInitChain()
    }
    set {_uniqueStorage()._value = .initChain(newValue)}
  }

  var query: Types_RequestQuery {
    get {
      if case .query(let v)? = _storage._value {return v}
      return Types_RequestQuery()
    }
    set {_uniqueStorage()._value = .query(newValue)}
  }

  var beginBlock: Types_RequestBeginBlock {
    get {
      if case .beginBlock(let v)? = _storage._value {return v}
      return Types_RequestBeginBlock()
    }
    set {_uniqueStorage()._value = .beginBlock(newValue)}
  }

  var checkTx: Types_RequestCheckTx {
    get {
      if case .checkTx(let v)? = _storage._value {return v}
      return Types_RequestCheckTx()
    }
    set {_uniqueStorage()._value = .checkTx(newValue)}
  }

  var deliverTx: Types_RequestDeliverTx {
    get {
      if case .deliverTx(let v)? = _storage._value {return v}
      return Types_RequestDeliverTx()
    }
    set {_uniqueStorage()._value = .deliverTx(newValue)}
  }

  var endBlock: Types_RequestEndBlock {
    get {
      if case .endBlock(let v)? = _storage._value {return v}
      return Types_RequestEndBlock()
    }
    set {_uniqueStorage()._value = .endBlock(newValue)}
  }

  var commit: Types_RequestCommit {
    get {
      if case .commit(let v)? = _storage._value {return v}
      return Types_RequestCommit()
    }
    set {_uniqueStorage()._value = .commit(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case echo(Types_RequestEcho)
    case flush(Types_RequestFlush)
    case info(Types_RequestInfo)
    case setOption(Types_RequestSetOption)
    case initChain(Types_RequestInitChain)
    case query(Types_RequestQuery)
    case beginBlock(Types_RequestBeginBlock)
    case checkTx(Types_RequestCheckTx)
    case deliverTx(Types_RequestDeliverTx)
    case endBlock(Types_RequestEndBlock)
    case commit(Types_RequestCommit)

    static func ==(lhs: Types_Request.OneOf_Value, rhs: Types_Request.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.echo(let l), .echo(let r)): return l == r
      case (.flush(let l), .flush(let r)): return l == r
      case (.info(let l), .info(let r)): return l == r
      case (.setOption(let l), .setOption(let r)): return l == r
      case (.initChain(let l), .initChain(let r)): return l == r
      case (.query(let l), .query(let r)): return l == r
      case (.beginBlock(let l), .beginBlock(let r)): return l == r
      case (.checkTx(let l), .checkTx(let r)): return l == r
      case (.deliverTx(let l), .deliverTx(let r)): return l == r
      case (.endBlock(let l), .endBlock(let r)): return l == r
      case (.commit(let l), .commit(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Types_RequestEcho?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .echo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .echo(v)}
        case 3:
          var v: Types_RequestFlush?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .flush(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .flush(v)}
        case 4:
          var v: Types_RequestInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .info(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .info(v)}
        case 5:
          var v: Types_RequestSetOption?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .setOption(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .setOption(v)}
        case 6:
          var v: Types_RequestInitChain?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .initChain(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .initChain(v)}
        case 7:
          var v: Types_RequestQuery?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .query(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .query(v)}
        case 8:
          var v: Types_RequestBeginBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .beginBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .beginBlock(v)}
        case 9:
          var v: Types_RequestCheckTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .checkTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .checkTx(v)}
        case 11:
          var v: Types_RequestEndBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .endBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .endBlock(v)}
        case 12:
          var v: Types_RequestCommit?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .commit(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .commit(v)}
        case 19:
          var v: Types_RequestDeliverTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .deliverTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .deliverTx(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .echo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .flush(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .info(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .setOption(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .initChain(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .query(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .beginBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .checkTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .endBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .commit(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .deliverTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_RequestEcho: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestEcho"

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestFlush: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestFlush"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestInfo"

  var version: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.version)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// nondeterministic
struct Types_RequestSetOption: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestSetOption"

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestInitChain: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestInitChain"

  ///[(gogoproto.nullable)=false];
  var validators: [Types_Validator] = []

  var appStateBytes: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.validators)
      case 2: try decoder.decodeSingularBytesField(value: &self.appStateBytes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.validators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.validators, fieldNumber: 1)
    }
    if !self.appStateBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.appStateBytes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestQuery: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestQuery"

  var data: Data = SwiftProtobuf.Internal.emptyData

  var path: String = String()

  var height: Int64 = 0

  var prove: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      case 2: try decoder.decodeSingularStringField(value: &self.path)
      case 3: try decoder.decodeSingularInt64Field(value: &self.height)
      case 4: try decoder.decodeSingularBoolField(value: &self.prove)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 3)
    }
    if self.prove != false {
      try visitor.visitSingularBoolField(value: self.prove, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestBeginBlock: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestBeginBlock"

  var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  ///[(gogoproto.nullable)=false];
  var header: Types_Header {
    get {return _storage._header ?? Types_Header()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_storage._header = nil}

  var absentValidators: [Int32] {
    get {return _storage._absentValidators}
    set {_uniqueStorage()._absentValidators = newValue}
  }

  ///[(gogoproto.nullable)=false];
  var byzantineValidators: [Types_Evidence] {
    get {return _storage._byzantineValidators}
    set {_uniqueStorage()._byzantineValidators = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._header)
        case 3: try decoder.decodeRepeatedInt32Field(value: &_storage._absentValidators)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._byzantineValidators)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 1)
      }
      if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._absentValidators.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._absentValidators, fieldNumber: 3)
      }
      if !_storage._byzantineValidators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._byzantineValidators, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_RequestCheckTx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestCheckTx"

  var tx: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.tx)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestDeliverTx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestDeliverTx"

  var tx: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.tx)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestEndBlock: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestEndBlock"

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.height)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_RequestCommit: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RequestCommit"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_Response: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Response"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var exception: Types_ResponseException {
    get {
      if case .exception(let v)? = _storage._value {return v}
      return Types_ResponseException()
    }
    set {_uniqueStorage()._value = .exception(newValue)}
  }

  var echo: Types_ResponseEcho {
    get {
      if case .echo(let v)? = _storage._value {return v}
      return Types_ResponseEcho()
    }
    set {_uniqueStorage()._value = .echo(newValue)}
  }

  var flush: Types_ResponseFlush {
    get {
      if case .flush(let v)? = _storage._value {return v}
      return Types_ResponseFlush()
    }
    set {_uniqueStorage()._value = .flush(newValue)}
  }

  var info: Types_ResponseInfo {
    get {
      if case .info(let v)? = _storage._value {return v}
      return Types_ResponseInfo()
    }
    set {_uniqueStorage()._value = .info(newValue)}
  }

  var setOption: Types_ResponseSetOption {
    get {
      if case .setOption(let v)? = _storage._value {return v}
      return Types_ResponseSetOption()
    }
    set {_uniqueStorage()._value = .setOption(newValue)}
  }

  var initChain: Types_ResponseInitChain {
    get {
      if case .initChain(let v)? = _storage._value {return v}
      return Types_ResponseInitChain()
    }
    set {_uniqueStorage()._value = .initChain(newValue)}
  }

  var query: Types_ResponseQuery {
    get {
      if case .query(let v)? = _storage._value {return v}
      return Types_ResponseQuery()
    }
    set {_uniqueStorage()._value = .query(newValue)}
  }

  var beginBlock: Types_ResponseBeginBlock {
    get {
      if case .beginBlock(let v)? = _storage._value {return v}
      return Types_ResponseBeginBlock()
    }
    set {_uniqueStorage()._value = .beginBlock(newValue)}
  }

  var checkTx: Types_ResponseCheckTx {
    get {
      if case .checkTx(let v)? = _storage._value {return v}
      return Types_ResponseCheckTx()
    }
    set {_uniqueStorage()._value = .checkTx(newValue)}
  }

  var deliverTx: Types_ResponseDeliverTx {
    get {
      if case .deliverTx(let v)? = _storage._value {return v}
      return Types_ResponseDeliverTx()
    }
    set {_uniqueStorage()._value = .deliverTx(newValue)}
  }

  var endBlock: Types_ResponseEndBlock {
    get {
      if case .endBlock(let v)? = _storage._value {return v}
      return Types_ResponseEndBlock()
    }
    set {_uniqueStorage()._value = .endBlock(newValue)}
  }

  var commit: Types_ResponseCommit {
    get {
      if case .commit(let v)? = _storage._value {return v}
      return Types_ResponseCommit()
    }
    set {_uniqueStorage()._value = .commit(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case exception(Types_ResponseException)
    case echo(Types_ResponseEcho)
    case flush(Types_ResponseFlush)
    case info(Types_ResponseInfo)
    case setOption(Types_ResponseSetOption)
    case initChain(Types_ResponseInitChain)
    case query(Types_ResponseQuery)
    case beginBlock(Types_ResponseBeginBlock)
    case checkTx(Types_ResponseCheckTx)
    case deliverTx(Types_ResponseDeliverTx)
    case endBlock(Types_ResponseEndBlock)
    case commit(Types_ResponseCommit)

    static func ==(lhs: Types_Response.OneOf_Value, rhs: Types_Response.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.exception(let l), .exception(let r)): return l == r
      case (.echo(let l), .echo(let r)): return l == r
      case (.flush(let l), .flush(let r)): return l == r
      case (.info(let l), .info(let r)): return l == r
      case (.setOption(let l), .setOption(let r)): return l == r
      case (.initChain(let l), .initChain(let r)): return l == r
      case (.query(let l), .query(let r)): return l == r
      case (.beginBlock(let l), .beginBlock(let r)): return l == r
      case (.checkTx(let l), .checkTx(let r)): return l == r
      case (.deliverTx(let l), .deliverTx(let r)): return l == r
      case (.endBlock(let l), .endBlock(let r)): return l == r
      case (.commit(let l), .commit(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Types_ResponseException?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .exception(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .exception(v)}
        case 2:
          var v: Types_ResponseEcho?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .echo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .echo(v)}
        case 3:
          var v: Types_ResponseFlush?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .flush(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .flush(v)}
        case 4:
          var v: Types_ResponseInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .info(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .info(v)}
        case 5:
          var v: Types_ResponseSetOption?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .setOption(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .setOption(v)}
        case 6:
          var v: Types_ResponseInitChain?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .initChain(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .initChain(v)}
        case 7:
          var v: Types_ResponseQuery?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .query(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .query(v)}
        case 8:
          var v: Types_ResponseBeginBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .beginBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .beginBlock(v)}
        case 9:
          var v: Types_ResponseCheckTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .checkTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .checkTx(v)}
        case 10:
          var v: Types_ResponseDeliverTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .deliverTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .deliverTx(v)}
        case 11:
          var v: Types_ResponseEndBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .endBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .endBlock(v)}
        case 12:
          var v: Types_ResponseCommit?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .commit(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .commit(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .exception(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .echo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .flush(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .info(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .setOption(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .initChain(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .query(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .beginBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .checkTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .deliverTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .endBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .commit(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// nondeterministic
struct Types_ResponseException: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseException"

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseEcho: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseEcho"

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseFlush: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseFlush"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseInfo"

  var data: String = String()

  var version: String = String()

  var lastBlockHeight: Int64 = 0

  var lastBlockAppHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.data)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularInt64Field(value: &self.lastBlockHeight)
      case 4: try decoder.decodeSingularBytesField(value: &self.lastBlockAppHash)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if self.lastBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastBlockHeight, fieldNumber: 3)
    }
    if !self.lastBlockAppHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.lastBlockAppHash, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// nondeterministic
struct Types_ResponseSetOption: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseSetOption"

  var code: UInt32 = 0

  /// bytes data = 2;
  var log: String = String()

  var info: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseInitChain: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseInitChain"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseQuery: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseQuery"

  var code: UInt32 = 0

  /// bytes data = 2; // use "value" instead.
  var log: String = String()

  /// nondeterministic
  var info: String = String()

  var index: Int64 = 0

  var key: Data = SwiftProtobuf.Internal.emptyData

  var value: Data = SwiftProtobuf.Internal.emptyData

  var proof: Data = SwiftProtobuf.Internal.emptyData

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      case 5: try decoder.decodeSingularInt64Field(value: &self.index)
      case 6: try decoder.decodeSingularBytesField(value: &self.key)
      case 7: try decoder.decodeSingularBytesField(value: &self.value)
      case 8: try decoder.decodeSingularBytesField(value: &self.proof)
      case 9: try decoder.decodeSingularInt64Field(value: &self.height)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    if self.index != 0 {
      try visitor.visitSingularInt64Field(value: self.index, fieldNumber: 5)
    }
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 6)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 7)
    }
    if !self.proof.isEmpty {
      try visitor.visitSingularBytesField(value: self.proof, fieldNumber: 8)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseBeginBlock: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseBeginBlock"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseCheckTx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseCheckTx"

  var code: UInt32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  var data: Data {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  /// nondeterministic
  var log: String {
    get {return _storage._log}
    set {_uniqueStorage()._log = newValue}
  }

  /// nondeterministic
  var info: String {
    get {return _storage._info}
    set {_uniqueStorage()._info = newValue}
  }

  var gasWanted: Int64 {
    get {return _storage._gasWanted}
    set {_uniqueStorage()._gasWanted = newValue}
  }

  /// int64 gas_used = 6;
  var tags: [Types_KVPair] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  ///[(gogoproto.nullable)=false];
  var fee: Types_KI64Pair {
    get {return _storage._fee ?? Types_KI64Pair()}
    set {_uniqueStorage()._fee = newValue}
  }
  /// Returns true if `fee` has been explicitly set.
  var hasFee: Bool {return _storage._fee != nil}
  /// Clears the value of `fee`. Subsequent reads from it will return its default value.
  mutating func clearFee() {_storage._fee = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._code)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._data)
        case 3: try decoder.decodeSingularStringField(value: &_storage._log)
        case 4: try decoder.decodeSingularStringField(value: &_storage._info)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._gasWanted)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._tags)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._fee)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._code != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._code, fieldNumber: 1)
      }
      if !_storage._data.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._data, fieldNumber: 2)
      }
      if !_storage._log.isEmpty {
        try visitor.visitSingularStringField(value: _storage._log, fieldNumber: 3)
      }
      if !_storage._info.isEmpty {
        try visitor.visitSingularStringField(value: _storage._info, fieldNumber: 4)
      }
      if _storage._gasWanted != 0 {
        try visitor.visitSingularInt64Field(value: _storage._gasWanted, fieldNumber: 5)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tags, fieldNumber: 7)
      }
      if let v = _storage._fee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_ResponseDeliverTx: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseDeliverTx"

  var code: UInt32 = 0

  var data: Data = SwiftProtobuf.Internal.emptyData

  /// nondeterministic
  var log: String = String()

  /// nondeterministic
  var info: String = String()

  var gasWanted: Int64 = 0

  var gasUsed: Int64 = 0

  ///[(gogoproto.nullable)=false, (gogoproto.jsontag)="tags,omitempty"];
  var tags: [Types_KVPair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      case 5: try decoder.decodeSingularInt64Field(value: &self.gasWanted)
      case 6: try decoder.decodeSingularInt64Field(value: &self.gasUsed)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.tags)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    if self.gasWanted != 0 {
      try visitor.visitSingularInt64Field(value: self.gasWanted, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_ResponseEndBlock: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseEndBlock"

  ///[(gogoproto.nullable)=false];
  var validatorUpdates: [Types_Validator] {
    get {return _storage._validatorUpdates}
    set {_uniqueStorage()._validatorUpdates = newValue}
  }

  var consensusParamUpdates: Types_ConsensusParams {
    get {return _storage._consensusParamUpdates ?? Types_ConsensusParams()}
    set {_uniqueStorage()._consensusParamUpdates = newValue}
  }
  /// Returns true if `consensusParamUpdates` has been explicitly set.
  var hasConsensusParamUpdates: Bool {return _storage._consensusParamUpdates != nil}
  /// Clears the value of `consensusParamUpdates`. Subsequent reads from it will return its default value.
  mutating func clearConsensusParamUpdates() {_storage._consensusParamUpdates = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._validatorUpdates)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._consensusParamUpdates)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._validatorUpdates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validatorUpdates, fieldNumber: 1)
      }
      if let v = _storage._consensusParamUpdates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_ResponseCommit: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ResponseCommit"

  /// reserve 1
  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// ConsensusParams contains all consensus-relevant parameters
/// that can be adjusted by the abci app
struct Types_ConsensusParams: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ConsensusParams"

  var blockSize: Types_BlockSize {
    get {return _storage._blockSize ?? Types_BlockSize()}
    set {_uniqueStorage()._blockSize = newValue}
  }
  /// Returns true if `blockSize` has been explicitly set.
  var hasBlockSize: Bool {return _storage._blockSize != nil}
  /// Clears the value of `blockSize`. Subsequent reads from it will return its default value.
  mutating func clearBlockSize() {_storage._blockSize = nil}

  var txSize: Types_TxSize {
    get {return _storage._txSize ?? Types_TxSize()}
    set {_uniqueStorage()._txSize = newValue}
  }
  /// Returns true if `txSize` has been explicitly set.
  var hasTxSize: Bool {return _storage._txSize != nil}
  /// Clears the value of `txSize`. Subsequent reads from it will return its default value.
  mutating func clearTxSize() {_storage._txSize = nil}

  var blockGossip: Types_BlockGossip {
    get {return _storage._blockGossip ?? Types_BlockGossip()}
    set {_uniqueStorage()._blockGossip = newValue}
  }
  /// Returns true if `blockGossip` has been explicitly set.
  var hasBlockGossip: Bool {return _storage._blockGossip != nil}
  /// Clears the value of `blockGossip`. Subsequent reads from it will return its default value.
  mutating func clearBlockGossip() {_storage._blockGossip = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._blockSize)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._txSize)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._blockGossip)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._blockSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._txSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._blockGossip {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// BlockSize contain limits on the block size.
struct Types_BlockSize: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BlockSize"

  var maxBytes: Int32 = 0

  var maxTxs: Int32 = 0

  var maxGas: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.maxBytes)
      case 2: try decoder.decodeSingularInt32Field(value: &self.maxTxs)
      case 3: try decoder.decodeSingularInt64Field(value: &self.maxGas)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.maxBytes, fieldNumber: 1)
    }
    if self.maxTxs != 0 {
      try visitor.visitSingularInt32Field(value: self.maxTxs, fieldNumber: 2)
    }
    if self.maxGas != 0 {
      try visitor.visitSingularInt64Field(value: self.maxGas, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// TxSize contain limits on the tx size.
struct Types_TxSize: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TxSize"

  var maxBytes: Int32 = 0

  var maxGas: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.maxBytes)
      case 2: try decoder.decodeSingularInt64Field(value: &self.maxGas)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.maxBytes, fieldNumber: 1)
    }
    if self.maxGas != 0 {
      try visitor.visitSingularInt64Field(value: self.maxGas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// BlockGossip determine consensus critical
/// elements of how blocks are gossiped
struct Types_BlockGossip: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BlockGossip"

  /// Note: must not be 0
  var blockPartSizeBytes: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.blockPartSizeBytes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.blockPartSizeBytes != 0 {
      try visitor.visitSingularInt32Field(value: self.blockPartSizeBytes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_Header: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Header"

  ///[(gogoproto.customname)="ChainID"];
  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var time: Int64 {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var numTxs: Int32 {
    get {return _storage._numTxs}
    set {_uniqueStorage()._numTxs = newValue}
  }

  ///[(gogoproto.customname)="LastBlockID", (gogoproto.nullable)=false];
  var lastBlockID: Types_BlockID {
    get {return _storage._lastBlockID ?? Types_BlockID()}
    set {_uniqueStorage()._lastBlockID = newValue}
  }
  /// Returns true if `lastBlockID` has been explicitly set.
  var hasLastBlockID: Bool {return _storage._lastBlockID != nil}
  /// Clears the value of `lastBlockID`. Subsequent reads from it will return its default value.
  mutating func clearLastBlockID() {_storage._lastBlockID = nil}

  var lastCommitHash: Data {
    get {return _storage._lastCommitHash}
    set {_uniqueStorage()._lastCommitHash = newValue}
  }

  var dataHash: Data {
    get {return _storage._dataHash}
    set {_uniqueStorage()._dataHash = newValue}
  }

  var validatorsHash: Data {
    get {return _storage._validatorsHash}
    set {_uniqueStorage()._validatorsHash = newValue}
  }

  var appHash: Data {
    get {return _storage._appHash}
    set {_uniqueStorage()._appHash = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._time)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._numTxs)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._lastBlockID)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._lastCommitHash)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._dataHash)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._validatorsHash)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._appHash)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 1)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 2)
      }
      if _storage._time != 0 {
        try visitor.visitSingularInt64Field(value: _storage._time, fieldNumber: 3)
      }
      if _storage._numTxs != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numTxs, fieldNumber: 4)
      }
      if let v = _storage._lastBlockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._lastCommitHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._lastCommitHash, fieldNumber: 6)
      }
      if !_storage._dataHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._dataHash, fieldNumber: 7)
      }
      if !_storage._validatorsHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._validatorsHash, fieldNumber: 8)
      }
      if !_storage._appHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appHash, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_BlockID: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BlockID"

  var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  ///[(gogoproto.nullable)=false];
  var parts: Types_PartSetHeader {
    get {return _storage._parts ?? Types_PartSetHeader()}
    set {_uniqueStorage()._parts = newValue}
  }
  /// Returns true if `parts` has been explicitly set.
  var hasParts: Bool {return _storage._parts != nil}
  /// Clears the value of `parts`. Subsequent reads from it will return its default value.
  mutating func clearParts() {_storage._parts = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._parts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 1)
      }
      if let v = _storage._parts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Types_PartSetHeader: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".PartSetHeader"

  var total: Int32 = 0

  var hash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularInt32Field(value: self.total, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_Validator: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Validator"

  var pubKey: Data = SwiftProtobuf.Internal.emptyData

  var power: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.pubKey)
      case 2: try decoder.decodeSingularInt64Field(value: &self.power)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 1)
    }
    if self.power != 0 {
      try visitor.visitSingularInt64Field(value: self.power, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Types_Evidence: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Evidence"

  var pubKey: Data = SwiftProtobuf.Internal.emptyData

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.pubKey)
      case 2: try decoder.decodeSingularInt64Field(value: &self.height)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Define these here for compatibility but use tmlibs/common.KVPair.
struct Types_KVPair: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".KVPair"

  var key: Data = SwiftProtobuf.Internal.emptyData

  var value: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.key)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Define these here for compatibility but use tmlibs/common.KI64Pair.
struct Types_KI64Pair: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".KI64Pair"

  var key: Data = SwiftProtobuf.Internal.emptyData

  var value: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.key)
      case 2: try decoder.decodeSingularInt64Field(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularInt64Field(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "types"

extension Types_Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "echo"),
    3: .same(proto: "flush"),
    4: .same(proto: "info"),
    5: .standard(proto: "set_option"),
    6: .standard(proto: "init_chain"),
    7: .same(proto: "query"),
    8: .standard(proto: "begin_block"),
    9: .standard(proto: "check_tx"),
    19: .standard(proto: "deliver_tx"),
    11: .standard(proto: "end_block"),
    12: .same(proto: "commit"),
  ]

  fileprivate class _StorageClass {
    var _value: Types_Request.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestEcho: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestEcho) -> Bool {
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestFlush: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Types_RequestFlush) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestInfo) -> Bool {
    if self.version != other.version {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestSetOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestSetOption) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestInitChain: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validators"),
    2: .standard(proto: "app_state_bytes"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestInitChain) -> Bool {
    if self.validators != other.validators {return false}
    if self.appStateBytes != other.appStateBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestQuery: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "path"),
    3: .same(proto: "height"),
    4: .same(proto: "prove"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestQuery) -> Bool {
    if self.data != other.data {return false}
    if self.path != other.path {return false}
    if self.height != other.height {return false}
    if self.prove != other.prove {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestBeginBlock: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "header"),
    3: .standard(proto: "absent_validators"),
    4: .standard(proto: "byzantine_validators"),
  ]

  fileprivate class _StorageClass {
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _header: Types_Header? = nil
    var _absentValidators: [Int32] = []
    var _byzantineValidators: [Types_Evidence] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _header = source._header
      _absentValidators = source._absentValidators
      _byzantineValidators = source._byzantineValidators
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_RequestBeginBlock) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._hash != other_storage._hash {return false}
        if _storage._header != other_storage._header {return false}
        if _storage._absentValidators != other_storage._absentValidators {return false}
        if _storage._byzantineValidators != other_storage._byzantineValidators {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestCheckTx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestCheckTx) -> Bool {
    if self.tx != other.tx {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestDeliverTx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestDeliverTx) -> Bool {
    if self.tx != other.tx {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestEndBlock: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_RequestEndBlock) -> Bool {
    if self.height != other.height {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_RequestCommit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Types_RequestCommit) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exception"),
    2: .same(proto: "echo"),
    3: .same(proto: "flush"),
    4: .same(proto: "info"),
    5: .standard(proto: "set_option"),
    6: .standard(proto: "init_chain"),
    7: .same(proto: "query"),
    8: .standard(proto: "begin_block"),
    9: .standard(proto: "check_tx"),
    10: .standard(proto: "deliver_tx"),
    11: .standard(proto: "end_block"),
    12: .same(proto: "commit"),
  ]

  fileprivate class _StorageClass {
    var _value: Types_Response.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseException: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseException) -> Bool {
    if self.error != other.error {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseEcho: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseEcho) -> Bool {
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseFlush: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Types_ResponseFlush) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "version"),
    3: .standard(proto: "last_block_height"),
    4: .standard(proto: "last_block_app_hash"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseInfo) -> Bool {
    if self.data != other.data {return false}
    if self.version != other.version {return false}
    if self.lastBlockHeight != other.lastBlockHeight {return false}
    if self.lastBlockAppHash != other.lastBlockAppHash {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseSetOption: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseSetOption) -> Bool {
    if self.code != other.code {return false}
    if self.log != other.log {return false}
    if self.info != other.info {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseInitChain: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Types_ResponseInitChain) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseQuery: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .same(proto: "index"),
    6: .same(proto: "key"),
    7: .same(proto: "value"),
    8: .same(proto: "proof"),
    9: .same(proto: "height"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseQuery) -> Bool {
    if self.code != other.code {return false}
    if self.log != other.log {return false}
    if self.info != other.info {return false}
    if self.index != other.index {return false}
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if self.proof != other.proof {return false}
    if self.height != other.height {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseBeginBlock: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Types_ResponseBeginBlock) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseCheckTx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .standard(proto: "gas_wanted"),
    7: .same(proto: "tags"),
    8: .same(proto: "fee"),
  ]

  fileprivate class _StorageClass {
    var _code: UInt32 = 0
    var _data: Data = SwiftProtobuf.Internal.emptyData
    var _log: String = String()
    var _info: String = String()
    var _gasWanted: Int64 = 0
    var _tags: [Types_KVPair] = []
    var _fee: Types_KI64Pair? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _data = source._data
      _log = source._log
      _info = source._info
      _gasWanted = source._gasWanted
      _tags = source._tags
      _fee = source._fee
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_ResponseCheckTx) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._code != other_storage._code {return false}
        if _storage._data != other_storage._data {return false}
        if _storage._log != other_storage._log {return false}
        if _storage._info != other_storage._info {return false}
        if _storage._gasWanted != other_storage._gasWanted {return false}
        if _storage._tags != other_storage._tags {return false}
        if _storage._fee != other_storage._fee {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseDeliverTx: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .standard(proto: "gas_wanted"),
    6: .standard(proto: "gas_used"),
    7: .same(proto: "tags"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseDeliverTx) -> Bool {
    if self.code != other.code {return false}
    if self.data != other.data {return false}
    if self.log != other.log {return false}
    if self.info != other.info {return false}
    if self.gasWanted != other.gasWanted {return false}
    if self.gasUsed != other.gasUsed {return false}
    if self.tags != other.tags {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseEndBlock: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_updates"),
    2: .standard(proto: "consensus_param_updates"),
  ]

  fileprivate class _StorageClass {
    var _validatorUpdates: [Types_Validator] = []
    var _consensusParamUpdates: Types_ConsensusParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _validatorUpdates = source._validatorUpdates
      _consensusParamUpdates = source._consensusParamUpdates
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_ResponseEndBlock) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._validatorUpdates != other_storage._validatorUpdates {return false}
        if _storage._consensusParamUpdates != other_storage._consensusParamUpdates {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ResponseCommit: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "data"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_ResponseCommit) -> Bool {
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_ConsensusParams: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_size"),
    2: .standard(proto: "tx_size"),
    3: .standard(proto: "block_gossip"),
  ]

  fileprivate class _StorageClass {
    var _blockSize: Types_BlockSize? = nil
    var _txSize: Types_TxSize? = nil
    var _blockGossip: Types_BlockGossip? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockSize = source._blockSize
      _txSize = source._txSize
      _blockGossip = source._blockGossip
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_ConsensusParams) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._blockSize != other_storage._blockSize {return false}
        if _storage._txSize != other_storage._txSize {return false}
        if _storage._blockGossip != other_storage._blockGossip {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_BlockSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_bytes"),
    2: .standard(proto: "max_txs"),
    3: .standard(proto: "max_gas"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_BlockSize) -> Bool {
    if self.maxBytes != other.maxBytes {return false}
    if self.maxTxs != other.maxTxs {return false}
    if self.maxGas != other.maxGas {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_TxSize: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_bytes"),
    2: .standard(proto: "max_gas"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_TxSize) -> Bool {
    if self.maxBytes != other.maxBytes {return false}
    if self.maxGas != other.maxGas {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_BlockGossip: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_part_size_bytes"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_BlockGossip) -> Bool {
    if self.blockPartSizeBytes != other.blockPartSizeBytes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_Header: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "chain_id"),
    2: .same(proto: "height"),
    3: .same(proto: "time"),
    4: .standard(proto: "num_txs"),
    5: .standard(proto: "last_block_id"),
    6: .standard(proto: "last_commit_hash"),
    7: .standard(proto: "data_hash"),
    8: .standard(proto: "validators_hash"),
    9: .standard(proto: "app_hash"),
  ]

  fileprivate class _StorageClass {
    var _chainID: String = String()
    var _height: Int64 = 0
    var _time: Int64 = 0
    var _numTxs: Int32 = 0
    var _lastBlockID: Types_BlockID? = nil
    var _lastCommitHash: Data = SwiftProtobuf.Internal.emptyData
    var _dataHash: Data = SwiftProtobuf.Internal.emptyData
    var _validatorsHash: Data = SwiftProtobuf.Internal.emptyData
    var _appHash: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chainID = source._chainID
      _height = source._height
      _time = source._time
      _numTxs = source._numTxs
      _lastBlockID = source._lastBlockID
      _lastCommitHash = source._lastCommitHash
      _dataHash = source._dataHash
      _validatorsHash = source._validatorsHash
      _appHash = source._appHash
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_Header) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._chainID != other_storage._chainID {return false}
        if _storage._height != other_storage._height {return false}
        if _storage._time != other_storage._time {return false}
        if _storage._numTxs != other_storage._numTxs {return false}
        if _storage._lastBlockID != other_storage._lastBlockID {return false}
        if _storage._lastCommitHash != other_storage._lastCommitHash {return false}
        if _storage._dataHash != other_storage._dataHash {return false}
        if _storage._validatorsHash != other_storage._validatorsHash {return false}
        if _storage._appHash != other_storage._appHash {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_BlockID: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "parts"),
  ]

  fileprivate class _StorageClass {
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _parts: Types_PartSetHeader? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _parts = source._parts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Types_BlockID) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._hash != other_storage._hash {return false}
        if _storage._parts != other_storage._parts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_PartSetHeader: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "hash"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_PartSetHeader) -> Bool {
    if self.total != other.total {return false}
    if self.hash != other.hash {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_Validator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "power"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_Validator) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if self.power != other.power {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_Evidence: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "height"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_Evidence) -> Bool {
    if self.pubKey != other.pubKey {return false}
    if self.height != other.height {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_KVPair: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_KVPair) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Types_KI64Pair: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Types_KI64Pair) -> Bool {
    if self.key != other.key {return false}
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
